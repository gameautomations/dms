async Ver():Promise<string>{ const res = await this.exec(0,);return res;}
async SetPath(path: string):Promise<number>{ const res = await this.exec(1,path);return Number(res);}
async Ocr(x1: number,y1: number,x2: number,y2: number,color: string,sim: number):Promise<string>{ const res = await this.exec(2,x1,y1,x2,y2,color,sim);return res;}
async FindStr(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<[number,number,number]>{ const res = await this.exec(3,x1,y1,x2,y2,str,color,sim);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async GetResultCount(str: string):Promise<number>{ const res = await this.exec(4,str);return Number(res);}
async GetResultPos(str: string,index: number):Promise<[number,number,number]>{ const res = await this.exec(5,str,index);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async StrStr(s: string,str: string):Promise<number>{ const res = await this.exec(6,s,str);return Number(res);}
async SendCommand(cmd: string):Promise<number>{ const res = await this.exec(7,cmd);return Number(res);}
async UseDict(index: number):Promise<number>{ const res = await this.exec(8,index);return Number(res);}
async GetBasePath():Promise<string>{ const res = await this.exec(9,);return res;}
async SetDictPwd(pwd: string):Promise<number>{ const res = await this.exec(10,pwd);return Number(res);}
async OcrInFile(x1: number,y1: number,x2: number,y2: number,pic_name: string,color: string,sim: number):Promise<string>{ const res = await this.exec(11,x1,y1,x2,y2,pic_name,color,sim);return res;}
async Capture(x1: number,y1: number,x2: number,y2: number,file: string):Promise<number>{ const res = await this.exec(12,x1,y1,x2,y2,file);return Number(res);}
async KeyPress(vk: number):Promise<number>{ const res = await this.exec(13,vk);return Number(res);}
async KeyDown(vk: number):Promise<number>{ const res = await this.exec(14,vk);return Number(res);}
async KeyUp(vk: number):Promise<number>{ const res = await this.exec(15,vk);return Number(res);}
async LeftClick():Promise<number>{ const res = await this.exec(16,);return Number(res);}
async RightClick():Promise<number>{ const res = await this.exec(17,);return Number(res);}
async MiddleClick():Promise<number>{ const res = await this.exec(18,);return Number(res);}
async LeftDoubleClick():Promise<number>{ const res = await this.exec(19,);return Number(res);}
async LeftDown():Promise<number>{ const res = await this.exec(20,);return Number(res);}
async LeftUp():Promise<number>{ const res = await this.exec(21,);return Number(res);}
async RightDown():Promise<number>{ const res = await this.exec(22,);return Number(res);}
async RightUp():Promise<number>{ const res = await this.exec(23,);return Number(res);}
async MoveTo(x: number,y: number):Promise<number>{ const res = await this.exec(24,x,y);return Number(res);}
async MoveR(rx: number,ry: number):Promise<number>{ const res = await this.exec(25,rx,ry);return Number(res);}
async GetColor(x: number,y: number):Promise<string>{ const res = await this.exec(26,x,y);return res;}
async GetColorBGR(x: number,y: number):Promise<string>{ const res = await this.exec(27,x,y);return res;}
async RGB2BGR(rgb_color: string):Promise<string>{ const res = await this.exec(28,rgb_color);return res;}
async BGR2RGB(bgr_color: string):Promise<string>{ const res = await this.exec(29,bgr_color);return res;}
async UnBindWindow():Promise<number>{ const res = await this.exec(30,);return Number(res);}
async CmpColor(x: number,y: number,color: string,sim: number):Promise<number>{ const res = await this.exec(31,x,y,color,sim);return Number(res);}
async ClientToScreen(hwnd: number):Promise<[number,number,number]>{ const res = await this.exec(32,hwnd);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async ScreenToClient(hwnd: number):Promise<[number,number,number]>{ const res = await this.exec(33,hwnd);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async ShowScrMsg(x1: number,y1: number,x2: number,y2: number,msg: string,color: string):Promise<number>{ const res = await this.exec(34,x1,y1,x2,y2,msg,color);return Number(res);}
async SetMinRowGap(row_gap: number):Promise<number>{ const res = await this.exec(35,row_gap);return Number(res);}
async SetMinColGap(col_gap: number):Promise<number>{ const res = await this.exec(36,col_gap);return Number(res);}
async FindColor(x1: number,y1: number,x2: number,y2: number,color: string,sim: number,dir: number):Promise<[number,number,number]>{ const res = await this.exec(37,x1,y1,x2,y2,color,sim,dir);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindColorEx(x1: number,y1: number,x2: number,y2: number,color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(38,x1,y1,x2,y2,color,sim,dir);return res;}
async SetWordLineHeight(line_height: number):Promise<number>{ const res = await this.exec(39,line_height);return Number(res);}
async SetWordGap(word_gap: number):Promise<number>{ const res = await this.exec(40,word_gap);return Number(res);}
async SetRowGapNoDict(row_gap: number):Promise<number>{ const res = await this.exec(41,row_gap);return Number(res);}
async SetColGapNoDict(col_gap: number):Promise<number>{ const res = await this.exec(42,col_gap);return Number(res);}
async SetWordLineHeightNoDict(line_height: number):Promise<number>{ const res = await this.exec(43,line_height);return Number(res);}
async SetWordGapNoDict(word_gap: number):Promise<number>{ const res = await this.exec(44,word_gap);return Number(res);}
async GetWordResultCount(str: string):Promise<number>{ const res = await this.exec(45,str);return Number(res);}
async GetWordResultPos(str: string,index: number):Promise<[number,number,number]>{ const res = await this.exec(46,str,index);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async GetWordResultStr(str: string,index: number):Promise<string>{ const res = await this.exec(47,str,index);return res;}
async GetWords(x1: number,y1: number,x2: number,y2: number,color: string,sim: number):Promise<string>{ const res = await this.exec(48,x1,y1,x2,y2,color,sim);return res;}
async GetWordsNoDict(x1: number,y1: number,x2: number,y2: number,color: string):Promise<string>{ const res = await this.exec(49,x1,y1,x2,y2,color);return res;}
async SetShowErrorMsg(show: number):Promise<number>{ const res = await this.exec(50,show);return Number(res);}
async GetClientSize(hwnd: number):Promise<[number,number,number]>{ const res = await this.exec(51,hwnd);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async MoveWindow(hwnd: number,x: number,y: number):Promise<number>{ const res = await this.exec(52,hwnd,x,y);return Number(res);}
async GetColorHSV(x: number,y: number):Promise<string>{ const res = await this.exec(53,x,y);return res;}
async GetAveRGB(x1: number,y1: number,x2: number,y2: number):Promise<string>{ const res = await this.exec(54,x1,y1,x2,y2);return res;}
async GetAveHSV(x1: number,y1: number,x2: number,y2: number):Promise<string>{ const res = await this.exec(55,x1,y1,x2,y2);return res;}
async GetForegroundWindow():Promise<number>{ const res = await this.exec(56,);return Number(res);}
async GetForegroundFocus():Promise<number>{ const res = await this.exec(57,);return Number(res);}
async GetMousePointWindow():Promise<number>{ const res = await this.exec(58,);return Number(res);}
async GetPointWindow(x: number,y: number):Promise<number>{ const res = await this.exec(59,x,y);return Number(res);}
async EnumWindow(parent: number,title: string,class_name: string,filter: number):Promise<string>{ const res = await this.exec(60,parent,title,class_name,filter);return res;}
async GetWindowState(hwnd: number,flag: number):Promise<number>{ const res = await this.exec(61,hwnd,flag);return Number(res);}
async GetWindow(hwnd: number,flag: number):Promise<number>{ const res = await this.exec(62,hwnd,flag);return Number(res);}
async GetSpecialWindow(flag: number):Promise<number>{ const res = await this.exec(63,flag);return Number(res);}
async SetWindowText(hwnd: number,text: string):Promise<number>{ const res = await this.exec(64,hwnd,text);return Number(res);}
async SetWindowSize(hwnd: number,width: number,height: number):Promise<number>{ const res = await this.exec(65,hwnd,width,height);return Number(res);}
async GetWindowRect(hwnd: number):Promise<[number,number,number,number,number]>{ const res = await this.exec(66,hwnd);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2]),Number(arr[3]),Number(arr[4])];}
async GetWindowTitle(hwnd: number):Promise<string>{ const res = await this.exec(67,hwnd);return res;}
async GetWindowClass(hwnd: number):Promise<string>{ const res = await this.exec(68,hwnd);return res;}
async SetWindowState(hwnd: number,flag: number):Promise<number>{ const res = await this.exec(69,hwnd,flag);return Number(res);}
async CreateFoobarRect(hwnd: number,x: number,y: number,w: number,h: number):Promise<number>{ const res = await this.exec(70,hwnd,x,y,w,h);return Number(res);}
async CreateFoobarRoundRect(hwnd: number,x: number,y: number,w: number,h: number,rw: number,rh: number):Promise<number>{ const res = await this.exec(71,hwnd,x,y,w,h,rw,rh);return Number(res);}
async CreateFoobarEllipse(hwnd: number,x: number,y: number,w: number,h: number):Promise<number>{ const res = await this.exec(72,hwnd,x,y,w,h);return Number(res);}
async CreateFoobarCustom(hwnd: number,x: number,y: number,pic: string,trans_color: string,sim: number):Promise<number>{ const res = await this.exec(73,hwnd,x,y,pic,trans_color,sim);return Number(res);}
async FoobarFillRect(hwnd: number,x1: number,y1: number,x2: number,y2: number,color: string):Promise<number>{ const res = await this.exec(74,hwnd,x1,y1,x2,y2,color);return Number(res);}
async FoobarDrawText(hwnd: number,x: number,y: number,w: number,h: number,text: string,color: string,align: number):Promise<number>{ const res = await this.exec(75,hwnd,x,y,w,h,text,color,align);return Number(res);}
async FoobarDrawPic(hwnd: number,x: number,y: number,pic: string,trans_color: string):Promise<number>{ const res = await this.exec(76,hwnd,x,y,pic,trans_color);return Number(res);}
async FoobarUpdate(hwnd: number):Promise<number>{ const res = await this.exec(77,hwnd);return Number(res);}
async FoobarLock(hwnd: number):Promise<number>{ const res = await this.exec(78,hwnd);return Number(res);}
async FoobarUnlock(hwnd: number):Promise<number>{ const res = await this.exec(79,hwnd);return Number(res);}
async FoobarSetFont(hwnd: number,font_name: string,size: number,flag: number):Promise<number>{ const res = await this.exec(80,hwnd,font_name,size,flag);return Number(res);}
async FoobarTextRect(hwnd: number,x: number,y: number,w: number,h: number):Promise<number>{ const res = await this.exec(81,hwnd,x,y,w,h);return Number(res);}
async FoobarPrintText(hwnd: number,text: string,color: string):Promise<number>{ const res = await this.exec(82,hwnd,text,color);return Number(res);}
async FoobarClearText(hwnd: number):Promise<number>{ const res = await this.exec(83,hwnd);return Number(res);}
async FoobarTextLineGap(hwnd: number,gap: number):Promise<number>{ const res = await this.exec(84,hwnd,gap);return Number(res);}
async Play(file: string):Promise<number>{ const res = await this.exec(85,file);return Number(res);}
async FaqCapture(x1: number,y1: number,x2: number,y2: number,quality: number,delay: number,time: number):Promise<number>{ const res = await this.exec(86,x1,y1,x2,y2,quality,delay,time);return Number(res);}
async FaqRelease(handle: number):Promise<number>{ const res = await this.exec(87,handle);return Number(res);}
async FaqSend(server: string,handle: number,request_type: number,time_out: number):Promise<string>{ const res = await this.exec(88,server,handle,request_type,time_out);return res;}
async Beep(fre: number,delay: number):Promise<number>{ const res = await this.exec(89,fre,delay);return Number(res);}
async FoobarClose(hwnd: number):Promise<number>{ const res = await this.exec(90,hwnd);return Number(res);}
async MoveDD(dx: number,dy: number):Promise<number>{ const res = await this.exec(91,dx,dy);return Number(res);}
async FaqGetSize(handle: number):Promise<number>{ const res = await this.exec(92,handle);return Number(res);}
async LoadPic(pic_name: string):Promise<number>{ const res = await this.exec(93,pic_name);return Number(res);}
async FreePic(pic_name: string):Promise<number>{ const res = await this.exec(94,pic_name);return Number(res);}
async GetScreenData(x1: number,y1: number,x2: number,y2: number):Promise<number>{ const res = await this.exec(95,x1,y1,x2,y2);return Number(res);}
async FreeScreenData(handle: number):Promise<number>{ const res = await this.exec(96,handle);return Number(res);}
async WheelUp():Promise<number>{ const res = await this.exec(97,);return Number(res);}
async WheelDown():Promise<number>{ const res = await this.exec(98,);return Number(res);}
async SetMouseDelay(type: string,delay: number):Promise<number>{ const res = await this.exec(99,type,delay);return Number(res);}
async SetKeypadDelay(type: string,delay: number):Promise<number>{ const res = await this.exec(100,type,delay);return Number(res);}
async GetEnv(index: number,name: string):Promise<string>{ const res = await this.exec(101,index,name);return res;}
async SetEnv(index: number,name: string,value: string):Promise<number>{ const res = await this.exec(102,index,name,value);return Number(res);}
async SendString(hwnd: number,str: string):Promise<number>{ const res = await this.exec(103,hwnd,str);return Number(res);}
async DelEnv(index: number,name: string):Promise<number>{ const res = await this.exec(104,index,name);return Number(res);}
async GetPath():Promise<string>{ const res = await this.exec(105,);return res;}
async SetDict(index: number,dict_name: string):Promise<number>{ const res = await this.exec(106,index,dict_name);return Number(res);}
async FindPic(x1: number,y1: number,x2: number,y2: number,pic_name: string,delta_color: string,sim: number,dir: number):Promise<[number,number,number]>{ const res = await this.exec(107,x1,y1,x2,y2,pic_name,delta_color,sim,dir);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindPicEx(x1: number,y1: number,x2: number,y2: number,pic_name: string,delta_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(108,x1,y1,x2,y2,pic_name,delta_color,sim,dir);return res;}
async SetClientSize(hwnd: number,width: number,height: number):Promise<number>{ const res = await this.exec(109,hwnd,width,height);return Number(res);}
async ReadInt(hwnd: number,addr: string,type: number):Promise<number>{ const res = await this.exec(110,hwnd,addr,type);return Number(res);}
async ReadFloat(hwnd: number,addr: string):Promise<number>{ const res = await this.exec(111,hwnd,addr);return Number(res);}
async ReadDouble(hwnd: number,addr: string):Promise<number>{ const res = await this.exec(112,hwnd,addr);return Number(res);}
async FindInt(hwnd: number,addr_range: string,int_value_min: number,int_value_max: number,type: number):Promise<string>{ const res = await this.exec(113,hwnd,addr_range,int_value_min,int_value_max,type);return res;}
async FindFloat(hwnd: number,addr_range: string,float_value_min: number,float_value_max: number):Promise<string>{ const res = await this.exec(114,hwnd,addr_range,float_value_min,float_value_max);return res;}
async FindDouble(hwnd: number,addr_range: string,double_value_min: number,double_value_max: number):Promise<string>{ const res = await this.exec(115,hwnd,addr_range,double_value_min,double_value_max);return res;}
async FindString(hwnd: number,addr_range: string,string_value: string,type: number):Promise<string>{ const res = await this.exec(116,hwnd,addr_range,string_value,type);return res;}
async GetModuleBaseAddr(hwnd: number,module_name: string):Promise<number>{ const res = await this.exec(117,hwnd,module_name);return Number(res);}
async MoveToEx(x: number,y: number,w: number,h: number):Promise<string>{ const res = await this.exec(118,x,y,w,h);return res;}
async MatchPicName(pic_name: string):Promise<string>{ const res = await this.exec(119,pic_name);return res;}
async AddDict(index: number,dict_info: string):Promise<number>{ const res = await this.exec(120,index,dict_info);return Number(res);}
async EnterCri():Promise<number>{ const res = await this.exec(121,);return Number(res);}
async LeaveCri():Promise<number>{ const res = await this.exec(122,);return Number(res);}
async WriteInt(hwnd: number,addr: string,type: number,v: number):Promise<number>{ const res = await this.exec(123,hwnd,addr,type,v);return Number(res);}
async WriteFloat(hwnd: number,addr: string,v: number):Promise<number>{ const res = await this.exec(124,hwnd,addr,v);return Number(res);}
async WriteDouble(hwnd: number,addr: string,v: number):Promise<number>{ const res = await this.exec(125,hwnd,addr,v);return Number(res);}
async WriteString(hwnd: number,addr: string,type: number,v: string):Promise<number>{ const res = await this.exec(126,hwnd,addr,type,v);return Number(res);}
async AsmAdd(asm_ins: string):Promise<number>{ const res = await this.exec(127,asm_ins);return Number(res);}
async AsmClear():Promise<number>{ const res = await this.exec(128,);return Number(res);}
async AsmCall(hwnd: number,mode: number):Promise<number>{ const res = await this.exec(129,hwnd,mode);return Number(res);}
async FindMultiColor(x1: number,y1: number,x2: number,y2: number,first_color: string,offset_color: string,sim: number,dir: number):Promise<[number,number,number]>{ const res = await this.exec(130,x1,y1,x2,y2,first_color,offset_color,sim,dir);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindMultiColorEx(x1: number,y1: number,x2: number,y2: number,first_color: string,offset_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(131,x1,y1,x2,y2,first_color,offset_color,sim,dir);return res;}
async Assemble(base_addr: number,is_64bit: number):Promise<string>{ const res = await this.exec(132,base_addr,is_64bit);return res;}
async DisAssemble(asm_code: string,base_addr: number,is_64bit: number):Promise<string>{ const res = await this.exec(133,asm_code,base_addr,is_64bit);return res;}
async SetWindowTransparent(hwnd: number,v: number):Promise<number>{ const res = await this.exec(134,hwnd,v);return Number(res);}
async ReadData(hwnd: number,addr: string,len: number):Promise<string>{ const res = await this.exec(135,hwnd,addr,len);return res;}
async WriteData(hwnd: number,addr: string,data: string):Promise<number>{ const res = await this.exec(136,hwnd,addr,data);return Number(res);}
async FindData(hwnd: number,addr_range: string,data: string):Promise<string>{ const res = await this.exec(137,hwnd,addr_range,data);return res;}
async SetPicPwd(pwd: string):Promise<number>{ const res = await this.exec(138,pwd);return Number(res);}
async Log(info: string):Promise<number>{ const res = await this.exec(139,info);return Number(res);}
async FindStrE(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<string>{ const res = await this.exec(140,x1,y1,x2,y2,str,color,sim);return res;}
async FindColorE(x1: number,y1: number,x2: number,y2: number,color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(141,x1,y1,x2,y2,color,sim,dir);return res;}
async FindPicE(x1: number,y1: number,x2: number,y2: number,pic_name: string,delta_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(142,x1,y1,x2,y2,pic_name,delta_color,sim,dir);return res;}
async FindMultiColorE(x1: number,y1: number,x2: number,y2: number,first_color: string,offset_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(143,x1,y1,x2,y2,first_color,offset_color,sim,dir);return res;}
async SetExactOcr(exact_ocr: number):Promise<number>{ const res = await this.exec(144,exact_ocr);return Number(res);}
async ReadString(hwnd: number,addr: string,type: number,len: number):Promise<string>{ const res = await this.exec(145,hwnd,addr,type,len);return res;}
async FoobarTextPrintDir(hwnd: number,dir: number):Promise<number>{ const res = await this.exec(146,hwnd,dir);return Number(res);}
async OcrEx(x1: number,y1: number,x2: number,y2: number,color: string,sim: number):Promise<string>{ const res = await this.exec(147,x1,y1,x2,y2,color,sim);return res;}
async SetDisplayInput(mode: string):Promise<number>{ const res = await this.exec(148,mode);return Number(res);}
async GetTime():Promise<number>{ const res = await this.exec(149,);return Number(res);}
async GetScreenWidth():Promise<number>{ const res = await this.exec(150,);return Number(res);}
async GetScreenHeight():Promise<number>{ const res = await this.exec(151,);return Number(res);}
async BindWindowEx(hwnd: number,display: string,mouse: string,keypad: string,public_desc: string,mode: number):Promise<number>{ const res = await this.exec(152,hwnd,display,mouse,keypad,public_desc,mode);return Number(res);}
async GetDiskSerial(index: number):Promise<string>{ const res = await this.exec(153,index);return res;}
async Md5(str: string):Promise<string>{ const res = await this.exec(154,str);return res;}
async GetMac():Promise<string>{ const res = await this.exec(155,);return res;}
async ActiveInputMethod(hwnd: number,id: string):Promise<number>{ const res = await this.exec(156,hwnd,id);return Number(res);}
async CheckInputMethod(hwnd: number,id: string):Promise<number>{ const res = await this.exec(157,hwnd,id);return Number(res);}
async FindInputMethod(id: string):Promise<number>{ const res = await this.exec(158,id);return Number(res);}
async GetCursorPos():Promise<[number,number,number]>{ const res = await this.exec(159,);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async BindWindow(hwnd: number,display: string,mouse: string,keypad: string,mode: number):Promise<number>{ const res = await this.exec(160,hwnd,display,mouse,keypad,mode);return Number(res);}
async FindWindow(class_name: string,title_name: string):Promise<number>{ const res = await this.exec(161,class_name,title_name);return Number(res);}
async GetScreenDepth():Promise<number>{ const res = await this.exec(162,);return Number(res);}
async SetScreen(width: number,height: number,depth: number):Promise<number>{ const res = await this.exec(163,width,height,depth);return Number(res);}
async ExitOs(type: number):Promise<number>{ const res = await this.exec(164,type);return Number(res);}
async GetDir(type: number):Promise<string>{ const res = await this.exec(165,type);return res;}
async GetOsType():Promise<number>{ const res = await this.exec(166,);return Number(res);}
async FindWindowEx(parent: number,class_name: string,title_name: string):Promise<number>{ const res = await this.exec(167,parent,class_name,title_name);return Number(res);}
async SetExportDict(index: number,dict_name: string):Promise<number>{ const res = await this.exec(168,index,dict_name);return Number(res);}
async GetCursorShape():Promise<string>{ const res = await this.exec(169,);return res;}
async DownCpu(type: number,rate: number):Promise<number>{ const res = await this.exec(170,type,rate);return Number(res);}
async GetCursorSpot():Promise<string>{ const res = await this.exec(171,);return res;}
async SendString2(hwnd: number,str: string):Promise<number>{ const res = await this.exec(172,hwnd,str);return Number(res);}
async FaqPost(server: string,handle: number,request_type: number,time_out: number):Promise<number>{ const res = await this.exec(173,server,handle,request_type,time_out);return Number(res);}
async FaqFetch():Promise<string>{ const res = await this.exec(174,);return res;}
async FetchWord(x1: number,y1: number,x2: number,y2: number,color: string,word: string):Promise<string>{ const res = await this.exec(175,x1,y1,x2,y2,color,word);return res;}
async CaptureJpg(x1: number,y1: number,x2: number,y2: number,file: string,quality: number):Promise<number>{ const res = await this.exec(176,x1,y1,x2,y2,file,quality);return Number(res);}
async FindStrWithFont(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number,font_name: string,font_size: number,flag: number):Promise<[number,number,number]>{ const res = await this.exec(177,x1,y1,x2,y2,str,color,sim,font_name,font_size,flag);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindStrWithFontE(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number,font_name: string,font_size: number,flag: number):Promise<string>{ const res = await this.exec(178,x1,y1,x2,y2,str,color,sim,font_name,font_size,flag);return res;}
async FindStrWithFontEx(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number,font_name: string,font_size: number,flag: number):Promise<string>{ const res = await this.exec(179,x1,y1,x2,y2,str,color,sim,font_name,font_size,flag);return res;}
async GetDictInfo(str: string,font_name: string,font_size: number,flag: number):Promise<string>{ const res = await this.exec(180,str,font_name,font_size,flag);return res;}
async SaveDict(index: number,file: string):Promise<number>{ const res = await this.exec(181,index,file);return Number(res);}
async GetWindowProcessId(hwnd: number):Promise<number>{ const res = await this.exec(182,hwnd);return Number(res);}
async GetWindowProcessPath(hwnd: number):Promise<string>{ const res = await this.exec(183,hwnd);return res;}
async LockInput(lock: number):Promise<number>{ const res = await this.exec(184,lock);return Number(res);}
async GetPicSize(pic_name: string):Promise<string>{ const res = await this.exec(185,pic_name);return res;}
async GetID():Promise<number>{ const res = await this.exec(186,);return Number(res);}
async CapturePng(x1: number,y1: number,x2: number,y2: number,file: string):Promise<number>{ const res = await this.exec(187,x1,y1,x2,y2,file);return Number(res);}
async CaptureGif(x1: number,y1: number,x2: number,y2: number,file: string,delay: number,time: number):Promise<number>{ const res = await this.exec(188,x1,y1,x2,y2,file,delay,time);return Number(res);}
async ImageToBmp(pic_name: string,bmp_name: string):Promise<number>{ const res = await this.exec(189,pic_name,bmp_name);return Number(res);}
async FindStrFast(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<[number,number,number]>{ const res = await this.exec(190,x1,y1,x2,y2,str,color,sim);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindStrFastEx(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<string>{ const res = await this.exec(191,x1,y1,x2,y2,str,color,sim);return res;}
async FindStrFastE(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<string>{ const res = await this.exec(192,x1,y1,x2,y2,str,color,sim);return res;}
async EnableDisplayDebug(enable_debug: number):Promise<number>{ const res = await this.exec(193,enable_debug);return Number(res);}
async CapturePre(file: string):Promise<number>{ const res = await this.exec(194,file);return Number(res);}
async RegEx(code: string,Ver: string,ip: string):Promise<number>{ const res = await this.exec(195,code,Ver,ip);return Number(res);}
async GetMachineCode():Promise<string>{ const res = await this.exec(196,);return res;}
async SetClipboard(data: string):Promise<number>{ const res = await this.exec(197,data);return Number(res);}
async GetClipboard():Promise<string>{ const res = await this.exec(198,);return res;}
async GetNowDict():Promise<number>{ const res = await this.exec(199,);return Number(res);}
async Is64Bit():Promise<number>{ const res = await this.exec(200,);return Number(res);}
async GetColorNum(x1: number,y1: number,x2: number,y2: number,color: string,sim: number):Promise<number>{ const res = await this.exec(201,x1,y1,x2,y2,color,sim);return Number(res);}
async EnumWindowByProcess(process_name: string,title: string,class_name: string,filter: number):Promise<string>{ const res = await this.exec(202,process_name,title,class_name,filter);return res;}
async GetDictCount(index: number):Promise<number>{ const res = await this.exec(203,index);return Number(res);}
async GetLastError():Promise<number>{ const res = await this.exec(204,);return Number(res);}
async GetNetTime():Promise<string>{ const res = await this.exec(205,);return res;}
async EnableGetColorByCapture(en: number):Promise<number>{ const res = await this.exec(206,en);return Number(res);}
async CheckUAC():Promise<number>{ const res = await this.exec(207,);return Number(res);}
async SetUAC(uac: number):Promise<number>{ const res = await this.exec(208,uac);return Number(res);}
async DisableFontSmooth():Promise<number>{ const res = await this.exec(209,);return Number(res);}
async CheckFontSmooth():Promise<number>{ const res = await this.exec(210,);return Number(res);}
async SetDisplayAcceler(level: number):Promise<number>{ const res = await this.exec(211,level);return Number(res);}
async FindWindowByProcess(process_name: string,class_name: string,title_name: string):Promise<number>{ const res = await this.exec(212,process_name,class_name,title_name);return Number(res);}
async FindWindowByProcessId(process_id: number,class_name: string,title_name: string):Promise<number>{ const res = await this.exec(213,process_id,class_name,title_name);return Number(res);}
async ReadIni(section: string,key: string,file: string):Promise<string>{ const res = await this.exec(214,section,key,file);return res;}
async WriteIni(section: string,key: string,v: string,file: string):Promise<number>{ const res = await this.exec(215,section,key,v,file);return Number(res);}
async RunApp(path: string,mode: number):Promise<number>{ const res = await this.exec(216,path,mode);return Number(res);}
async delay(mis: number):Promise<number>{ const res = await this.exec(217,mis);return Number(res);}
async FindWindowSuper(spec1: string,flag1: number,type1: number,spec2: string,flag2: number,type2: number):Promise<number>{ const res = await this.exec(218,spec1,flag1,type1,spec2,flag2,type2);return Number(res);}
async ExcludePos(all_pos: string,type: number,x1: number,y1: number,x2: number,y2: number):Promise<string>{ const res = await this.exec(219,all_pos,type,x1,y1,x2,y2);return res;}
async FindNearestPos(all_pos: string,type: number,x: number,y: number):Promise<string>{ const res = await this.exec(220,all_pos,type,x,y);return res;}
async SortPosDistance(all_pos: string,type: number,x: number,y: number):Promise<string>{ const res = await this.exec(221,all_pos,type,x,y);return res;}
async FindPicMem(x1: number,y1: number,x2: number,y2: number,pic_info: string,delta_color: string,sim: number,dir: number):Promise<[number,number,number]>{ const res = await this.exec(222,x1,y1,x2,y2,pic_info,delta_color,sim,dir);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindPicMemEx(x1: number,y1: number,x2: number,y2: number,pic_info: string,delta_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(223,x1,y1,x2,y2,pic_info,delta_color,sim,dir);return res;}
async FindPicMemE(x1: number,y1: number,x2: number,y2: number,pic_info: string,delta_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(224,x1,y1,x2,y2,pic_info,delta_color,sim,dir);return res;}
async AppendPicAddr(pic_info: string,addr: number,size: number):Promise<string>{ const res = await this.exec(225,pic_info,addr,size);return res;}
async WriteFile(file: string,content: string):Promise<number>{ const res = await this.exec(226,file,content);return Number(res);}
async Stop(id: number):Promise<number>{ const res = await this.exec(227,id);return Number(res);}
async SetDictMem(index: number,addr: number,size: number):Promise<number>{ const res = await this.exec(228,index,addr,size);return Number(res);}
async GetNetTimeSafe():Promise<string>{ const res = await this.exec(229,);return res;}
async ForceUnBindWindow(hwnd: number):Promise<number>{ const res = await this.exec(230,hwnd);return Number(res);}
async ReadIniPwd(section: string,key: string,file: string,pwd: string):Promise<string>{ const res = await this.exec(231,section,key,file,pwd);return res;}
async WriteIniPwd(section: string,key: string,v: string,file: string,pwd: string):Promise<number>{ const res = await this.exec(232,section,key,v,file,pwd);return Number(res);}
async DecodeFile(file: string,pwd: string):Promise<number>{ const res = await this.exec(233,file,pwd);return Number(res);}
async KeyDownChar(key_str: string):Promise<number>{ const res = await this.exec(234,key_str);return Number(res);}
async KeyUpChar(key_str: string):Promise<number>{ const res = await this.exec(235,key_str);return Number(res);}
async KeyPressChar(key_str: string):Promise<number>{ const res = await this.exec(236,key_str);return Number(res);}
async KeyPressStr(key_str: string,delay: number):Promise<number>{ const res = await this.exec(237,key_str,delay);return Number(res);}
async EnableKeypadPatch(en: number):Promise<number>{ const res = await this.exec(238,en);return Number(res);}
async EnableKeypadSync(en: number,time_out: number):Promise<number>{ const res = await this.exec(239,en,time_out);return Number(res);}
async EnableMouseSync(en: number,time_out: number):Promise<number>{ const res = await this.exec(240,en,time_out);return Number(res);}
async DmGuard(en: number,type: string):Promise<number>{ const res = await this.exec(241,en,type);return Number(res);}
async FaqCaptureFromFile(x1: number,y1: number,x2: number,y2: number,file: string,quality: number):Promise<number>{ const res = await this.exec(242,x1,y1,x2,y2,file,quality);return Number(res);}
async FindIntEx(hwnd: number,addr_range: string,int_value_min: number,int_value_max: number,type: number,step: number,multi_thread: number,mode: number):Promise<string>{ const res = await this.exec(243,hwnd,addr_range,int_value_min,int_value_max,type,step,multi_thread,mode);return res;}
async FindFloatEx(hwnd: number,addr_range: string,float_value_min: number,float_value_max: number,step: number,multi_thread: number,mode: number):Promise<string>{ const res = await this.exec(244,hwnd,addr_range,float_value_min,float_value_max,step,multi_thread,mode);return res;}
async FindDoubleEx(hwnd: number,addr_range: string,double_value_min: number,double_value_max: number,step: number,multi_thread: number,mode: number):Promise<string>{ const res = await this.exec(245,hwnd,addr_range,double_value_min,double_value_max,step,multi_thread,mode);return res;}
async FindStringEx(hwnd: number,addr_range: string,string_value: string,type: number,step: number,multi_thread: number,mode: number):Promise<string>{ const res = await this.exec(246,hwnd,addr_range,string_value,type,step,multi_thread,mode);return res;}
async FindDataEx(hwnd: number,addr_range: string,data: string,step: number,multi_thread: number,mode: number):Promise<string>{ const res = await this.exec(247,hwnd,addr_range,data,step,multi_thread,mode);return res;}
async EnableRealMouse(en: number,mousedelay: number,mousestep: number):Promise<number>{ const res = await this.exec(248,en,mousedelay,mousestep);return Number(res);}
async EnableRealKeypad(en: number):Promise<number>{ const res = await this.exec(249,en);return Number(res);}
async SendStringIme(str: string):Promise<number>{ const res = await this.exec(250,str);return Number(res);}
async FoobarDrawLine(hwnd: number,x1: number,y1: number,x2: number,y2: number,color: string,style: number,width: number):Promise<number>{ const res = await this.exec(251,hwnd,x1,y1,x2,y2,color,style,width);return Number(res);}
async FindStrEx(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<string>{ const res = await this.exec(252,x1,y1,x2,y2,str,color,sim);return res;}
async IsBind(hwnd: number):Promise<number>{ const res = await this.exec(253,hwnd);return Number(res);}
async SetDisplayDelay(t: number):Promise<number>{ const res = await this.exec(254,t);return Number(res);}
async GetDmCount():Promise<number>{ const res = await this.exec(255,);return Number(res);}
async DisableScreenSave():Promise<number>{ const res = await this.exec(256,);return Number(res);}
async DisablePowerSave():Promise<number>{ const res = await this.exec(257,);return Number(res);}
async SetMemoryHwndAsProcessId(en: number):Promise<number>{ const res = await this.exec(258,en);return Number(res);}
async FindShape(x1: number,y1: number,x2: number,y2: number,offset_color: string,sim: number,dir: number):Promise<[number,number,number]>{ const res = await this.exec(259,x1,y1,x2,y2,offset_color,sim,dir);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindShapeE(x1: number,y1: number,x2: number,y2: number,offset_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(260,x1,y1,x2,y2,offset_color,sim,dir);return res;}
async FindShapeEx(x1: number,y1: number,x2: number,y2: number,offset_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(261,x1,y1,x2,y2,offset_color,sim,dir);return res;}
async FindStrS(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<[string,number,number]>{ const res = await this.exec(262,x1,y1,x2,y2,str,color,sim);const arr = res.split('\n');return [arr[0],Number(arr[1]),Number(arr[2])];}
async FindStrExS(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<string>{ const res = await this.exec(263,x1,y1,x2,y2,str,color,sim);return res;}
async FindStrFastS(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<[string,number,number]>{ const res = await this.exec(264,x1,y1,x2,y2,str,color,sim);const arr = res.split('\n');return [arr[0],Number(arr[1]),Number(arr[2])];}
async FindStrFastExS(x1: number,y1: number,x2: number,y2: number,str: string,color: string,sim: number):Promise<string>{ const res = await this.exec(265,x1,y1,x2,y2,str,color,sim);return res;}
async FindPicS(x1: number,y1: number,x2: number,y2: number,pic_name: string,delta_color: string,sim: number,dir: number):Promise<[string,number,number]>{ const res = await this.exec(266,x1,y1,x2,y2,pic_name,delta_color,sim,dir);const arr = res.split('\n');return [arr[0],Number(arr[1]),Number(arr[2])];}
async FindPicExS(x1: number,y1: number,x2: number,y2: number,pic_name: string,delta_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(267,x1,y1,x2,y2,pic_name,delta_color,sim,dir);return res;}
async ClearDict(index: number):Promise<number>{ const res = await this.exec(268,index);return Number(res);}
async GetMachineCodeNoMac():Promise<string>{ const res = await this.exec(269,);return res;}
async GetClientRect(hwnd: number):Promise<[number,number,number,number,number]>{ const res = await this.exec(270,hwnd);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2]),Number(arr[3]),Number(arr[4])];}
async EnableFakeActive(en: number):Promise<number>{ const res = await this.exec(271,en);return Number(res);}
async GetScreenDataBmp(x1: number,y1: number,x2: number,y2: number):Promise<[number,number,number]>{ const res = await this.exec(272,x1,y1,x2,y2);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async EncodeFile(file: string,pwd: string):Promise<number>{ const res = await this.exec(273,file,pwd);return Number(res);}
async GetCursorShapeEx(type: number):Promise<string>{ const res = await this.exec(274,type);return res;}
async FaqCancel():Promise<number>{ const res = await this.exec(275,);return Number(res);}
async IntToData(int_value: number,type: number):Promise<string>{ const res = await this.exec(276,int_value,type);return res;}
async FloatToData(float_value: number):Promise<string>{ const res = await this.exec(277,float_value);return res;}
async DoubleToData(double_value: number):Promise<string>{ const res = await this.exec(278,double_value);return res;}
async StringToData(string_value: string,type: number):Promise<string>{ const res = await this.exec(279,string_value,type);return res;}
async SetMemoryFindResultToFile(file: string):Promise<number>{ const res = await this.exec(280,file);return Number(res);}
async EnableBind(en: number):Promise<number>{ const res = await this.exec(281,en);return Number(res);}
async SetSimMode(mode: number):Promise<number>{ const res = await this.exec(282,mode);return Number(res);}
async LockMouseRect(x1: number,y1: number,x2: number,y2: number):Promise<number>{ const res = await this.exec(283,x1,y1,x2,y2);return Number(res);}
async SendPaste(hwnd: number):Promise<number>{ const res = await this.exec(284,hwnd);return Number(res);}
async IsDisplayDead(x1: number,y1: number,x2: number,y2: number,t: number):Promise<number>{ const res = await this.exec(285,x1,y1,x2,y2,t);return Number(res);}
async GetKeyState(vk: number):Promise<number>{ const res = await this.exec(286,vk);return Number(res);}
async CopyFile(src_file: string,dst_file: string,over: number):Promise<number>{ const res = await this.exec(287,src_file,dst_file,over);return Number(res);}
async IsFileExist(file: string):Promise<number>{ const res = await this.exec(288,file);return Number(res);}
async DeleteFile(file: string):Promise<number>{ const res = await this.exec(289,file);return Number(res);}
async MoveFile(src_file: string,dst_file: string):Promise<number>{ const res = await this.exec(290,src_file,dst_file);return Number(res);}
async CreateFolder(folder_name: string):Promise<number>{ const res = await this.exec(291,folder_name);return Number(res);}
async DeleteFolder(folder_name: string):Promise<number>{ const res = await this.exec(292,folder_name);return Number(res);}
async GetFileLength(file: string):Promise<number>{ const res = await this.exec(293,file);return Number(res);}
async ReadFile(file: string):Promise<string>{ const res = await this.exec(294,file);return res;}
async WaitKey(key_code: number,time_out: number):Promise<number>{ const res = await this.exec(295,key_code,time_out);return Number(res);}
async DeleteIni(section: string,key: string,file: string):Promise<number>{ const res = await this.exec(296,section,key,file);return Number(res);}
async DeleteIniPwd(section: string,key: string,file: string,pwd: string):Promise<number>{ const res = await this.exec(297,section,key,file,pwd);return Number(res);}
async EnableSpeedDx(en: number):Promise<number>{ const res = await this.exec(298,en);return Number(res);}
async EnableIme(en: number):Promise<number>{ const res = await this.exec(299,en);return Number(res);}
async Reg(code: string,Ver: string):Promise<number>{ const res = await this.exec(300,code,Ver);return Number(res);}
async SelectFile():Promise<string>{ const res = await this.exec(301,);return res;}
async SelectDirectory():Promise<string>{ const res = await this.exec(302,);return res;}
async LockDisplay(lock: number):Promise<number>{ const res = await this.exec(303,lock);return Number(res);}
async FoobarSetSave(hwnd: number,file: string,en: number,header: string):Promise<number>{ const res = await this.exec(304,hwnd,file,en,header);return Number(res);}
async EnumWindowSuper(spec1: string,flag1: number,type1: number,spec2: string,flag2: number,type2: number,sort: number):Promise<string>{ const res = await this.exec(305,spec1,flag1,type1,spec2,flag2,type2,sort);return res;}
async DownloadFile(url: string,save_file: string,timeout: number):Promise<number>{ const res = await this.exec(306,url,save_file,timeout);return Number(res);}
async EnableKeypadMsg(en: number):Promise<number>{ const res = await this.exec(307,en);return Number(res);}
async EnableMouseMsg(en: number):Promise<number>{ const res = await this.exec(308,en);return Number(res);}
async RegNoMac(code: string,Ver: string):Promise<number>{ const res = await this.exec(309,code,Ver);return Number(res);}
async RegExNoMac(code: string,Ver: string,ip: string):Promise<number>{ const res = await this.exec(310,code,Ver,ip);return Number(res);}
async SetEnumWindowDelay(delay: number):Promise<number>{ const res = await this.exec(311,delay);return Number(res);}
async FindMulColor(x1: number,y1: number,x2: number,y2: number,color: string,sim: number):Promise<number>{ const res = await this.exec(312,x1,y1,x2,y2,color,sim);return Number(res);}
async GetDict(index: number,font_index: number):Promise<string>{ const res = await this.exec(313,index,font_index);return res;}
async GetBindWindow():Promise<number>{ const res = await this.exec(314,);return Number(res);}
async FoobarStartGif(hwnd: number,x: number,y: number,pic_name: string,repeat_limit: number,delay: number):Promise<number>{ const res = await this.exec(315,hwnd,x,y,pic_name,repeat_limit,delay);return Number(res);}
async FoobarStopGif(hwnd: number,x: number,y: number,pic_name: string):Promise<number>{ const res = await this.exec(316,hwnd,x,y,pic_name);return Number(res);}
async FreeProcessMemory(hwnd: number):Promise<number>{ const res = await this.exec(317,hwnd);return Number(res);}
async ReadFileData(file: string,start_pos: number,end_pos: number):Promise<string>{ const res = await this.exec(318,file,start_pos,end_pos);return res;}
async VirtualAllocEx(hwnd: number,addr: number,size: number,type: number):Promise<number>{ const res = await this.exec(319,hwnd,addr,size,type);return Number(res);}
async VirtualFreeEx(hwnd: number,addr: number):Promise<number>{ const res = await this.exec(320,hwnd,addr);return Number(res);}
async GetCommandLine(hwnd: number):Promise<string>{ const res = await this.exec(321,hwnd);return res;}
async TerminateProcess(pid: number):Promise<number>{ const res = await this.exec(322,pid);return Number(res);}
async GetNetTimeByIp(ip: string):Promise<string>{ const res = await this.exec(323,ip);return res;}
async EnumProcess(name: string):Promise<string>{ const res = await this.exec(324,name);return res;}
async GetProcessInfo(pid: number):Promise<string>{ const res = await this.exec(325,pid);return res;}
async ReadIntAddr(hwnd: number,addr: number,type: number):Promise<number>{ const res = await this.exec(326,hwnd,addr,type);return Number(res);}
async ReadDataAddr(hwnd: number,addr: number,len: number):Promise<string>{ const res = await this.exec(327,hwnd,addr,len);return res;}
async ReadDoubleAddr(hwnd: number,addr: number):Promise<number>{ const res = await this.exec(328,hwnd,addr);return Number(res);}
async ReadFloatAddr(hwnd: number,addr: number):Promise<number>{ const res = await this.exec(329,hwnd,addr);return Number(res);}
async ReadStringAddr(hwnd: number,addr: number,type: number,len: number):Promise<string>{ const res = await this.exec(330,hwnd,addr,type,len);return res;}
async WriteDataAddr(hwnd: number,addr: number,data: string):Promise<number>{ const res = await this.exec(331,hwnd,addr,data);return Number(res);}
async WriteDoubleAddr(hwnd: number,addr: number,v: number):Promise<number>{ const res = await this.exec(332,hwnd,addr,v);return Number(res);}
async WriteFloatAddr(hwnd: number,addr: number,v: number):Promise<number>{ const res = await this.exec(333,hwnd,addr,v);return Number(res);}
async WriteIntAddr(hwnd: number,addr: number,type: number,v: number):Promise<number>{ const res = await this.exec(334,hwnd,addr,type,v);return Number(res);}
async WriteStringAddr(hwnd: number,addr: number,type: number,v: string):Promise<number>{ const res = await this.exec(335,hwnd,addr,type,v);return Number(res);}
async Delays(min_s: number,max_s: number):Promise<number>{ const res = await this.exec(336,min_s,max_s);return Number(res);}
async FindColorBlock(x1: number,y1: number,x2: number,y2: number,color: string,sim: number,count: number,width: number,height: number):Promise<[number,number,number]>{ const res = await this.exec(337,x1,y1,x2,y2,color,sim,count,width,height);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindColorBlockEx(x1: number,y1: number,x2: number,y2: number,color: string,sim: number,count: number,width: number,height: number):Promise<string>{ const res = await this.exec(338,x1,y1,x2,y2,color,sim,count,width,height);return res;}
async OpenProcess(pid: number):Promise<number>{ const res = await this.exec(339,pid);return Number(res);}
async EnumIniSection(file: string):Promise<string>{ const res = await this.exec(340,file);return res;}
async EnumIniSectionPwd(file: string,pwd: string):Promise<string>{ const res = await this.exec(341,file,pwd);return res;}
async EnumIniKey(section: string,file: string):Promise<string>{ const res = await this.exec(342,section,file);return res;}
async EnumIniKeyPwd(section: string,file: string,pwd: string):Promise<string>{ const res = await this.exec(343,section,file,pwd);return res;}
async SwitchBindWindow(hwnd: number):Promise<number>{ const res = await this.exec(344,hwnd);return Number(res);}
async InitCri():Promise<number>{ const res = await this.exec(345,);return Number(res);}
async SendStringIme2(hwnd: number,str: string,mode: number):Promise<number>{ const res = await this.exec(346,hwnd,str,mode);return Number(res);}
async EnumWindowByProcessId(pid: number,title: string,class_name: string,filter: number):Promise<string>{ const res = await this.exec(347,pid,title,class_name,filter);return res;}
async GetDisplayInfo():Promise<string>{ const res = await this.exec(348,);return res;}
async EnableFontSmooth():Promise<number>{ const res = await this.exec(349,);return Number(res);}
async OcrExOne(x1: number,y1: number,x2: number,y2: number,color: string,sim: number):Promise<string>{ const res = await this.exec(350,x1,y1,x2,y2,color,sim);return res;}
async SetAero(en: number):Promise<number>{ const res = await this.exec(351,en);return Number(res);}
async FoobarSetTrans(hwnd: number,trans: number,color: string,sim: number):Promise<number>{ const res = await this.exec(352,hwnd,trans,color,sim);return Number(res);}
async EnablePicCache(en: number):Promise<number>{ const res = await this.exec(353,en);return Number(res);}
async FaqIsPosted():Promise<number>{ const res = await this.exec(354,);return Number(res);}
async LoadPicByte(addr: number,size: number,name: string):Promise<number>{ const res = await this.exec(355,addr,size,name);return Number(res);}
async MiddleDown():Promise<number>{ const res = await this.exec(356,);return Number(res);}
async MiddleUp():Promise<number>{ const res = await this.exec(357,);return Number(res);}
async FaqCaptureString(str: string):Promise<number>{ const res = await this.exec(358,str);return Number(res);}
async VirtualProtectEx(hwnd: number,addr: number,size: number,type: number,old_protect: number):Promise<number>{ const res = await this.exec(359,hwnd,addr,size,type,old_protect);return Number(res);}
async SetMouseSpeed(speed: number):Promise<number>{ const res = await this.exec(360,speed);return Number(res);}
async GetMouseSpeed():Promise<number>{ const res = await this.exec(361,);return Number(res);}
async EnableMouseAccuracy(en: number):Promise<number>{ const res = await this.exec(362,en);return Number(res);}
async SetExcludeRegion(type: number,info: string):Promise<number>{ const res = await this.exec(363,type,info);return Number(res);}
async EnableShareDict(en: number):Promise<number>{ const res = await this.exec(364,en);return Number(res);}
async DisableCloseDisplayAndSleep():Promise<number>{ const res = await this.exec(365,);return Number(res);}
async Int64ToInt32(v: number):Promise<number>{ const res = await this.exec(366,v);return Number(res);}
async GetLocale():Promise<number>{ const res = await this.exec(367,);return Number(res);}
async SetLocale():Promise<number>{ const res = await this.exec(368,);return Number(res);}
async ReadDataToBin(hwnd: number,addr: string,len: number):Promise<number>{ const res = await this.exec(369,hwnd,addr,len);return Number(res);}
async WriteDataFromBin(hwnd: number,addr: string,data: number,len: number):Promise<number>{ const res = await this.exec(370,hwnd,addr,data,len);return Number(res);}
async ReadDataAddrToBin(hwnd: number,addr: number,len: number):Promise<number>{ const res = await this.exec(371,hwnd,addr,len);return Number(res);}
async WriteDataAddrFromBin(hwnd: number,addr: number,data: number,len: number):Promise<number>{ const res = await this.exec(372,hwnd,addr,data,len);return Number(res);}
async SetParam64ToPointer():Promise<number>{ const res = await this.exec(373,);return Number(res);}
async GetDPI():Promise<number>{ const res = await this.exec(374,);return Number(res);}
async SetDisplayRefreshDelay(t: number):Promise<number>{ const res = await this.exec(375,t);return Number(res);}
async IsFolderExist(folder: string):Promise<number>{ const res = await this.exec(376,folder);return Number(res);}
async GetCpuType():Promise<number>{ const res = await this.exec(377,);return Number(res);}
async ReleaseRef():Promise<number>{ const res = await this.exec(378,);return Number(res);}
async SetExitThread(en: number):Promise<number>{ const res = await this.exec(379,en);return Number(res);}
async GetFps():Promise<number>{ const res = await this.exec(380,);return Number(res);}
async VirtualQueryEx(hwnd: number,addr: number,pmbi: number):Promise<string>{ const res = await this.exec(381,hwnd,addr,pmbi);return res;}
async AsmCallEx(hwnd: number,mode: number,base_addr: string):Promise<number>{ const res = await this.exec(382,hwnd,mode,base_addr);return Number(res);}
async GetRemoteApiAddress(hwnd: number,base_addr: number,fun_name: string):Promise<number>{ const res = await this.exec(383,hwnd,base_addr,fun_name);return Number(res);}
async ExecuteCmd(cmd: string,current_dir: string,time_out: number):Promise<string>{ const res = await this.exec(384,cmd,current_dir,time_out);return res;}
async SpeedNormalGraphic(en: number):Promise<number>{ const res = await this.exec(385,en);return Number(res);}
async UnLoadDriver():Promise<number>{ const res = await this.exec(386,);return Number(res);}
async GetOsBuildNumber():Promise<number>{ const res = await this.exec(387,);return Number(res);}
async HackSpeed(rate: number):Promise<number>{ const res = await this.exec(388,rate);return Number(res);}
async GetRealPath(path: string):Promise<string>{ const res = await this.exec(389,path);return res;}
async ShowTaskBarIcon(hwnd: number,is_show: number):Promise<number>{ const res = await this.exec(390,hwnd,is_show);return Number(res);}
async AsmSetTimeout(time_out: number,param: number):Promise<number>{ const res = await this.exec(391,time_out,param);return Number(res);}
async DmGuardParams(cmd: string,sub_cmd: string,param: string):Promise<string>{ const res = await this.exec(392,cmd,sub_cmd,param);return res;}
async GetModuleSize(hwnd: number,module_name: string):Promise<number>{ const res = await this.exec(393,hwnd,module_name);return Number(res);}
async IsSurrpotVt():Promise<number>{ const res = await this.exec(394,);return Number(res);}
async GetDiskModel(index: number):Promise<string>{ const res = await this.exec(395,index);return res;}
async GetDiskReversion(index: number):Promise<string>{ const res = await this.exec(396,index);return res;}
async EnableFindPicMultithread(en: number):Promise<number>{ const res = await this.exec(397,en);return Number(res);}
async GetCpuUsage():Promise<number>{ const res = await this.exec(398,);return Number(res);}
async GetMemoryUsage():Promise<number>{ const res = await this.exec(399,);return Number(res);}
async Hex32(v: number):Promise<string>{ const res = await this.exec(400,v);return res;}
async Hex64(v: number):Promise<string>{ const res = await this.exec(401,v);return res;}
async GetWindowThreadId(hwnd: number):Promise<number>{ const res = await this.exec(402,hwnd);return Number(res);}
async DmGuardExtract(type: string,path: string):Promise<number>{ const res = await this.exec(403,type,path);return Number(res);}
async DmGuardLoadCustom(type: string,path: string):Promise<number>{ const res = await this.exec(404,type,path);return Number(res);}
async SetShowAsmErrorMsg(show: number):Promise<number>{ const res = await this.exec(405,show);return Number(res);}
async GetSystemInfo(type: string,method: number):Promise<string>{ const res = await this.exec(406,type,method);return res;}
async SetFindPicMultithreadCount(count: number):Promise<number>{ const res = await this.exec(407,count);return Number(res);}
async FindPicSim(x1: number,y1: number,x2: number,y2: number,pic_name: string,delta_color: string,sim: number,dir: number):Promise<[number,number,number]>{ const res = await this.exec(408,x1,y1,x2,y2,pic_name,delta_color,sim,dir);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindPicSimEx(x1: number,y1: number,x2: number,y2: number,pic_name: string,delta_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(409,x1,y1,x2,y2,pic_name,delta_color,sim,dir);return res;}
async FindPicSimMem(x1: number,y1: number,x2: number,y2: number,pic_info: string,delta_color: string,sim: number,dir: number):Promise<[number,number,number]>{ const res = await this.exec(410,x1,y1,x2,y2,pic_info,delta_color,sim,dir);const arr = res.split('\n');return [Number(arr[0]),Number(arr[1]),Number(arr[2])];}
async FindPicSimMemEx(x1: number,y1: number,x2: number,y2: number,pic_info: string,delta_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(411,x1,y1,x2,y2,pic_info,delta_color,sim,dir);return res;}
async FindPicSimE(x1: number,y1: number,x2: number,y2: number,pic_name: string,delta_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(412,x1,y1,x2,y2,pic_name,delta_color,sim,dir);return res;}
async FindPicSimMemE(x1: number,y1: number,x2: number,y2: number,pic_info: string,delta_color: string,sim: number,dir: number):Promise<string>{ const res = await this.exec(413,x1,y1,x2,y2,pic_info,delta_color,sim,dir);return res;}
async SetInputDm(input_dm: number,rx: number,ry: number):Promise<number>{ const res = await this.exec(414,input_dm,rx,ry);return Number(res);}
